var auth;(()=>{"use strict";var e,r,n={261:(e,r,n)=>{var t={"./":()=>n.e(44).then((()=>()=>n(44)))},o=(e,r)=>(n.R=r,r=n.o(t,e)?t[e]():Promise.resolve().then((()=>{throw new Error('Module "'+e+'" does not exist in container.')})),n.R=void 0,r),i=(e,r)=>{if(n.S){var t="default",o=n.S[t];if(o&&o!==e)throw new Error("Container initialization failed as it has already been initialized with a different share scope");return n.S[t]=e,n.I(t,r)}};n.d(r,{get:()=>o,init:()=>i})}},t={};function o(e){var r=t[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var i=t[e]={exports:{}};try{var c={id:e,module:i,factory:n[e],require:o};o.i.forEach((function(e){e(c)})),i=c.module,c.factory.call(i.exports,i,i.exports,c.require)}catch(e){throw i.error=e,e}return i.exports}o.m=n,o.c=t,o.i=[],o.d=(e,r)=>{for(var n in r)o.o(r,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((r,n)=>(o.f[n](e,r),r)),[])),o.u=e=>e+".bundle.js",o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"auth."+o.h()+".hot-update.json",o.h=()=>"884db943d90fe35ce95c",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="micro_auth:",o.l=(n,t,i,c)=>{if(e[n])e[n].push(t);else{var a,d;if(void 0!==i)for(var u=document.getElementsByTagName("script"),s=0;s<u.length;s++){var l=u[s];if(l.getAttribute("src")==n||l.getAttribute("data-webpack")==r+i){a=l;break}}a||(d=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",r+i),a.src=n),e[n]=[t];var f=(r,t)=>{a.onerror=a.onload=null,clearTimeout(p);var o=e[n];if(delete e[n],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(t))),r)return r(t)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),d&&document.head.appendChild(a)}},(()=>{var e,r,n,t={},i=o.c,c=[],a=[],d="idle",u=0,s=[];function l(e){d=e;for(var r=[],n=0;n<a.length;n++)r[n]=a[n].call(null,e);return Promise.all(r).then((function(){}))}function f(){0==--u&&l("ready").then((function(){if(0===u){var e=s;s=[];for(var r=0;r<e.length;r++)e[r]()}}))}function p(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return l("check").then(o.hmrM).then((function(n){return n?l("prepare").then((function(){var t=[];return r=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,i){return o.hmrC[i](n.c,n.r,n.m,e,r,t),e}),[])).then((function(){return r=function(){return e?v(e):l("ready").then((function(){return t}))},0===u?r():new Promise((function(e){s.push((function(){e(r())}))}));var r}))})):l(m()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+d+")")})):v(e)}function v(e){e=e||{},m();var t=r.map((function(r){return r(e)}));r=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return l("abort").then((function(){throw o[0]}));var i=l("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var c,a=l("apply"),d=function(e){c||(c=e)},u=[];return t.forEach((function(e){if(e.apply){var r=e.apply(d);if(r)for(var n=0;n<r.length;n++)u.push(r[n])}})),Promise.all([i,a]).then((function(){return c?l("fail").then((function(){throw c})):n?v(e).then((function(e){return u.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):l("idle").then((function(){return u}))}))}function m(){if(n)return r||(r=[]),Object.keys(o.hmrI).forEach((function(e){n.forEach((function(n){o.hmrI[e](n,r)}))})),n=void 0,!0}o.hmrD=t,o.i.push((function(s){var v,m,y,g,b=s.module,w=function(r,n){var t=i[n];if(!t)return r;var o=function(o){if(t.hot.active){if(i[o]){var a=i[o].parents;-1===a.indexOf(n)&&a.push(n)}else c=[n],e=o;-1===t.children.indexOf(o)&&t.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+n),c=[];return r(o)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(n){r[e]=n}}};for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&"e"!==s&&Object.defineProperty(o,s,a(s));return o.e=function(e,n){return function(e){switch(d){case"ready":l("prepare");case"prepare":return u++,e.then(f,f),e;default:return e}}(r.e(e,n))},o}(s.require,s.id);b.hot=(v=s.id,m=b,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==v,_requireSelf:function(){c=m.parents.slice(),e=y?void 0:v,o(v)},active:!0,accept:function(e,r,n){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._acceptedDependencies[e[t]]=r||function(){},g._acceptedErrorHandlers[e[t]]=n;else g._acceptedDependencies[e]=r||function(){},g._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._declinedDependencies[e[r]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=g._disposeHandlers.indexOf(e);r>=0&&g._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":r=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,r)})),l("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(v)}},check:p,apply:h,status:function(e){if(!e)return d;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var r=a.indexOf(e);r>=0&&a.splice(r,1)},data:t[v]},e=void 0,g),b.parents=c,b.children=[],c=[],s.require=w})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var r=o.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");if(n.length)for(var t=n.length-1;t>-1&&(!e||!/^http(s?):/.test(e));)e=n[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,r=o.hmrS_jsonp=o.hmrS_jsonp||{933:0};o.f.j=(e,n)=>{var t=o.o(r,e)?r[e]:void 0;if(0!==t)if(t)n.push(t[2]);else{var i=new Promise(((n,o)=>t=r[e]=[n,o]));n.push(t[2]=i);var c=o.p+o.u(e),a=new Error;o.l(c,(n=>{if(o.o(r,e)&&(0!==(t=r[e])&&(r[e]=void 0),t)){var i=n&&("load"===n.type?"missing":n.type),c=n&&n.target&&n.target.src;a.message="Loading chunk "+e+" failed.\n("+i+": "+c+")",a.name="ChunkLoadError",a.type=i,a.request=c,t[1](a)}}),"chunk-"+e,e)}};var n,t,i,c,a={};function d(r,n){return e=n,new Promise(((e,n)=>{a[r]=e;var t=o.p+o.hu(r),i=new Error;o.l(t,(e=>{if(a[r]){a[r]=void 0;var t=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+r+" failed.\n("+t+": "+o+")",i.name="ChunkLoadError",i.type=t,i.request=o,n(i)}}))}))}function u(e){function a(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var i=t.pop(),c=i.id,a=i.chain,u=o.c[c];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:c};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:c};for(var s=0;s<u.parents.length;s++){var l=u.parents[s],f=o.c[l];if(f){if(f.hot._declinedDependencies[c])return{type:"declined",chain:a.concat([l]),moduleId:c,parentId:l};-1===r.indexOf(l)&&(f.hot._acceptedDependencies[c]?(n[l]||(n[l]=[]),d(n[l],[c])):(delete n[l],r.push(l),t.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function d(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,n=void 0;var u={},s=[],l={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(o.o(t,p)){var h,v=t[p],m=!1,y=!1,g=!1,b="";switch((h=v?a(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(p in l[p]=v,d(s,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,p)&&(u[p]||(u[p]=[]),d(u[p],h.outdatedDependencies[p]));g&&(d(s,[h.moduleId]),l[p]=f)}t=void 0;for(var w,E=[],_=0;_<s.length;_++){var I=s[_],k=o.c[I];k&&(k.hot._selfAccepted||k.hot._main)&&l[I]!==f&&!k.hot._selfInvalidated&&E.push({module:I,require:k.hot._requireSelf,errorHandler:k.hot._selfAccepted})}return{dispose:function(){var e;i.forEach((function(e){delete r[e]})),i=void 0;for(var n,t=s.slice();t.length>0;){var c=t.pop(),a=o.c[c];if(a){var d={},l=a.hot._disposeHandlers;for(_=0;_<l.length;_++)l[_].call(null,d);for(o.hmrD[c]=d,a.hot.active=!1,delete o.c[c],delete u[c],_=0;_<a.children.length;_++){var f=o.c[a.children[_]];f&&(e=f.parents.indexOf(c))>=0&&f.parents.splice(e,1)}}}for(var p in u)if(o.o(u,p)&&(a=o.c[p]))for(w=u[p],_=0;_<w.length;_++)n=w[_],(e=a.children.indexOf(n))>=0&&a.children.splice(e,1)},apply:function(r){for(var n in l)o.o(l,n)&&(o.m[n]=l[n]);for(var t=0;t<c.length;t++)c[t](o);for(var i in u)if(o.o(u,i)){var a=o.c[i];if(a){w=u[i];for(var d=[],f=[],p=[],h=0;h<w.length;h++){var v=w[h],m=a.hot._acceptedDependencies[v],y=a.hot._acceptedErrorHandlers[v];if(m){if(-1!==d.indexOf(m))continue;d.push(m),f.push(y),p.push(v)}}for(var g=0;g<d.length;g++)try{d[g].call(null,w)}catch(n){if("function"==typeof f[g])try{f[g](n,{moduleId:i,dependencyId:p[g]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[g],error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[g],error:n}),e.ignoreErrored||r(n)}}}for(var b=0;b<E.length;b++){var _=E[b],I=_.module;try{_.require(I)}catch(n){if("function"==typeof _.errorHandler)try{_.errorHandler(n,{moduleId:I,module:o.c[I]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:I,error:t,originalError:n}),e.ignoreErrored||(r(t),r(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:I,error:n}),e.ignoreErrored||r(n)}}return s}}}self.webpackHotUpdatemicro_auth=(r,n,i)=>{for(var d in n)o.o(n,d)&&(t[d]=n[d],e&&e.push(d));i&&c.push(i),a[r]&&(a[r](),a[r]=void 0)},o.hmrI.jsonp=function(e,r){t||(t={},c=[],i=[],r.push(u)),o.o(t,e)||(t[e]=o.m[e])},o.hmrC.jsonp=function(e,a,s,l,f,p){f.push(u),n={},i=a,t=s.reduce((function(e,r){return e[r]=!1,e}),{}),c=[],e.forEach((function(e){o.o(r,e)&&void 0!==r[e]?(l.push(d(e,p)),n[e]=!0):n[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,r){n&&o.o(n,e)&&!n[e]&&(r.push(d(e)),n[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))};var s=(e,n)=>{var t,i,[c,a,d]=n,u=0;if(c.some((e=>0!==r[e]))){for(t in a)o.o(a,t)&&(o.m[t]=a[t]);d&&d(o)}for(e&&e(n);u<c.length;u++)i=c[u],o.o(r,i)&&r[i]&&r[i][0](),r[i]=0},l=self.webpackChunkmicro_auth=self.webpackChunkmicro_auth||[];l.forEach(s.bind(null,0)),l.push=s.bind(null,l.push.bind(l))})();var i=o(261);auth=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,